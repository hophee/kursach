ggplot(data = spyro_p11_3, aes(vrema_obsled, lf_r50_om)) +
geom_line()
#переводит фрей в лонг формат, для отображения на одной картинке (бессмысленно, они слишком разных размерностей)
df_long <- spyro_p11_3 %>%
pivot_longer(cols = -c(pacient, vrema_obsled), names_to = "variable", values_to = "value")
ggplot(df_long, aes(x = vrema_obsled, y = value, color = variable)) +
geom_line() +
labs(title = "График времени для разных столбцов",
x = "Время",
y = "Значение") +
theme_minimal()
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
#прочтение оригинальных данных
spiro_data <-  read.xlsx('https://raw.githubusercontent.com/hophee/kursach/main/kursovaya.xlsx', sheet=1) %>%
janitor::clean_names()
#выделение моей даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
spyro_p11_3 <- spyro_p11_3 %>%   mutate(vrema_obsled = as.numeric(hms(vrema_obsled) - hms(vrema_obsled[1])))
spyro_p11_3 <- spyro_p11_3 %>% mutate(across(rn_r50_om:lf_phi5_grad, ~ rollmean(., k = 3, fill = NA)))
#отображение
ggplot(data = spyro_p11_3, aes(vrema_obsled, lf_r50_om)) +
geom_line()
#переводит фрей в лонг формат, для отображения на одной картинке (бессмысленно, они слишком разных размерностей)
df_long <- spyro_p11_3 %>%
pivot_longer(cols = -c(pacient, vrema_obsled), names_to = "variable", values_to = "value")
ggplot(df_long, aes(x = vrema_obsled, y = value, color = variable)) +
geom_line() +
labs(title = "График времени для разных столбцов",
x = "Время",
y = "Значение") +
theme_minimal()
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
source("~/Documents/univer/kursach/kursach.R", echo=TRUE)
?filter.fft
??filter.fft
install.packages('spectral')
library(spectral)
## noisy signal with amplitude modulation
x <- seq(0,1, length.out=500)
# original data
y_org <- (1+sin(2*2*pi*x))*sin(20*2*pi*x)
# overlay some noise
y_noise <- y_org+rnorm(length(x),sd=0.2)
# filter the noisy data
y_filt <- filter.fft(y_noise,x,fc=20,BW=4,n=50)
# plot results
plot(x,y_noise,type="l",lwd=1,col="darkgrey",lty=2,ylab="y",main="Spectral filtering")
lines(x,y_org,lwd=5,col="grey")
lines(x,y_filt)
legend("topright",c("org","noisy","filtered"),col=c("grey","darkgrey","black")
,lty=c(1,2,1),lwd=c(5,1,1))
lines(x,y_filt)
# plot results
plot(x,y_noise,type="l",lwd=1,col="darkgrey",lty=2,ylab="y",main="Spectral filtering")
lines(x,y_filt)
filted <- filter.fft(spyro_p11_3$rn_r50_om, spyro_p11_3$vrema_obsled, fc=20,BW=4,n=50)
ggplot(aes(spyro_p11_3$vrema_obsled, filted)) +
geom_point()
library(ggplot2) #визуализация
ggplot(aes(spyro_p11_3$vrema_obsled, filted)) +
geom_point()
filted <- filter.fft(spyro_p11_3$rn_r50_om, spyro_p11_3$vrema_obsled, fc=20,BW=4,n=50)
filted
?signal
install.packages("gsignal")
library(gsignal)
?fft()
fft(spyro_p11_3$rn_r50_om)
matrix(spyro_p11_3$vrema_obsled, spyro_p11_3$rn_r50_om)
na,omit(spyro_p11_3)
na.omit(spyro_p11_3)
is.na(spyro_p11_3)
sum(is.na(spyro_p11_3))
matrix(spyro_p11_3$vrema_obsled, na.omit(spyro_p11_3$rn_r50_om))
plot(matrix(spyro_p11_3$vrema_obsled, na.omit(spyro_p11_3$rn_r50_om)))
filted <- filter.fft(spyro_p11_3$rn_r50_om, spyro_p11_3$vrema_obsled)
ggplot(aes(spyro_p11_3$vrema_obsled, filted)) +
geom_point()
plot(spyro_p11_3[2],filted)
filted
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
fft(na.omit(spyro_p11_3[3]))
fft(na.omit(spyro_p11_3$rn_xc50_om))
#прочтение оригинальных данных
spiro_data <-  read.xlsx('https://raw.githubusercontent.com/hophee/kursach/main/kursovaya.xlsx', sheet=1) %>%
janitor::clean_names()
library(tidyr)
library(dplyr)
library(janitor) #обработка загаловков таблицы в едином формате
library(openxlsx) #загрузка датасета с гита
library(lubridate) #работа с датами
library(ggplot2) #визуализация
library(zoo)
#прочтение оригинальных данных
spiro_data <-  read.xlsx('https://raw.githubusercontent.com/hophee/kursach/main/kursovaya.xlsx', sheet=1) %>%
janitor::clean_names()
#выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
spyro_p11_3 <- spyro_p11_3 %>%   mutate(vrema_obsled = as.numeric(hms(vrema_obsled) - hms(vrema_obsled[1])))
fft(spyro_p11_3[3])
fft(spyro_p11_3$rn_r50_om)
plot(spyro_p11_3$vrema_obsled, fft(spyro_p11_3$rn_r50_om))
plot(spyro_p11_3$vrema_obsled, Mod(fft(spyro_p11_3$rn_r50_om)))
Mod(fft(spyro_p11_3$rn_r50_om))
fft(spyro_p11_3$rn_r50_om)
class(fft(spyro_p11_3$rn_r50_om))
fft(spyro_p11_3$rn_r50_om)^2
sqrt(fft(spyro_p11_3$rn_r50_om)^2)
class(sqrt(fft(spyro_p11_3$rn_r50_om)^2))
comp <- fft(spyro_p11_3$rn_r50_om)
comp <- Mod(comp)
class(comp)
comp
plot(comp)
?filter.fft
?fftfilt()
install.packages("signal")
detach("package:gsignal", unload = TRUE)
library(signal)
install.packages('signal')
library(gsignal)
?`gsignal-package`
?fftfilt()
t <- seq(0, 1, len = 10000)                          # 1 second sample
x <- sin(2* pi * t * 2.3) + 0.25 * rnorm(length(t))  # 2.3 Hz sinusoid+noise
filt <- rep(0.1, 10)                                 # filter kernel
y1 <- filter(filt, 1, x)                             # use normal convolution
y2 <- fftfilt(filt, x)                               # FFT convolution
plot(t, x, type = "l")
lines(t, y1, col = "red")
lines(t, y2, col = "blue")
y2 <- fftfilt(filt, y2)                               # FFT convolution
lines(t, y2, col = "blue")
y2 <- fftfilt(filt, y2)                               # FFT convolution
lines(t, y2, col = "blue")
filt
?fftfilt()
??fftfilt
fftfilt(time, spyro_p11_3$rn_r50_om)
class(time)
vremya <- spyro_p11_3$vrema_obsled
fftfilt(time, spyro_p11_3$rn_r50_om)
fftfilt(vremya, spyro_p11_3$rn_r50_om)
fourie <- fftfilt(vremya, spyro_p11_3$rn_r50_om)
plot(vremya, fourie)
porosya <- data.frame(c(2, 2.8, 3.3, 3.2, 4.4, 3.6, 1.9, 3.3, 2.8, 1.1),
c(3.5, 2.8, 3.2, 3.5, 2.3, 2.4, 2, 1.6),
c(3.3, 3.6, 2.6, 3.1, 3.2, 3.3, 2.9, 3.4, 3.2, 3.2),
c(3.2, 3.3, 3.2, 2.9, 3.3, 2.5, 2.6, 2.8),
c(2.6, 2.6, 2.9, 2, 2, 2.1),
c(3.1, 2.9, 3.1, 2.5),
c(2.6, 2.2, 2.2, 2.5, 1.2, 1.2),
c(2.5, 2.4, 3, 1.5))
porosya <- list(c(2, 2.8, 3.3, 3.2, 4.4, 3.6, 1.9, 3.3, 2.8, 1.1),
c(3.5, 2.8, 3.2, 3.5, 2.3, 2.4, 2, 1.6),
c(3.3, 3.6, 2.6, 3.1, 3.2, 3.3, 2.9, 3.4, 3.2, 3.2),
c(3.2, 3.3, 3.2, 2.9, 3.3, 2.5, 2.6, 2.8),
c(2.6, 2.6, 2.9, 2, 2, 2.1),
c(3.1, 2.9, 3.1, 2.5),
c(2.6, 2.2, 2.2, 2.5, 1.2, 1.2),
c(2.5, 2.4, 3, 1.5))
as.data.frame(porosya)
attributes(porosya)
porosya
anova(porosya)
na.pad <- function(x,len){
x[1:len]
}
makePaddedDataFrame <- function(l,...){
maxlen <- max(sapply(l,length))
data.frame(lapply(l,na.pad,len=maxlen),...)
}
makePaddedDataFrame(porosya)
svinyi <- makePaddedDataFrame(porosya)
show(svinyi)
View(svinyi)
names(svinyi) <- as.character(1:8)
anova(svinyi)
?anova()
?aov()
aov(1~., data = svinyi)
aov(. ~., data = svinyi)
aov(data = svinyi)
names(svinyi) <- names(spyro_p11_3)
rm(svinyi)
rm(porosya)
library(tidyr)
library(dplyr)
library(janitor) #обработка загаловков таблицы в едином формате
library(openxlsx) #загрузка датасета с гита
library(lubridate) #работа с датами
library(ggplot2) #визуализация
library(zoo)
#лучше использовать library(readxl), если загружается локально, тогда read.xlsx заменяется на read_xlsx
#функция для фильтра сигнала, по умолчанию выставлена чатоста среза 10, частота дискретизации 50, чтобы упростить вызов под задачу
fourie_filter <- function(signa, samp_rate = 50, cutoff_freq = 10) {
nyquist <- samp_rate / 2
cutoff <- floor(cutoff_freq / nyquist * length(signa) / 2)
filtered_fft <- fft(signa)
filtered_fft[(cutoff+1):(length(signa)-cutoff)] <- 0
filtered_data <- Re(fft(filtered_fft, inverse = TRUE)) / length(signa)
return (filtered_data)
}
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
spyro_p11_3 <- spyro_p11_3 %>% mutate(across(rn_r50_om:lf_phi5_grad, ~ fourie_filter(.)))
spyro_p11_3 <- spyro_p11_3 %>% mutate(across(rn_r50_om:lf_phi5_grad, ~ rollmean(., k = 3, fill = c((.[1]+.[2])/2, (.[length(.)]+.[length(.)-1])/2))))
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
#выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
spyro_p11_3 <- spyro_p11_3 %>% mutate(vrema_obsled = as.numeric(hms(vrema_obsled) - hms(vrema_obsled[1])))
spyro_p11_3 <- spyro_p11_3 %>% mutate(across(rn_r50_om:lf_phi5_grad, ~ fourie_filter(.)))
spyro_p11_3 <- spyro_p11_3 %>% mutate(across(rn_r50_om:lf_phi5_grad, ~ rollmean(., k = 3, fill = c((.[1]+.[2])/2, (.[length(.)]+.[length(.)-1])/2))))
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
#выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
spyro_p11_3 <- spyro_p11_3 %>% mutate(vrema_obsled = as.numeric(hms(vrema_obsled) - hms(vrema_obsled[1])))
spyro_p11_3 <- spyro_p11_3 %>% mutate(across(rn_r50_om:lf_phi5_grad, ~ fourie_filter(.)))
spyro_p11_3 <- spyro_p11_3 %>% mutate(across(rn_r50_om:lf_phi5_grad, ~ rollmean(., k = 5, fill = c((.[1]+.[2])/2, (.[length(.)]+.[length(.)-1])/2))))
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
library(tidyr)
library(dplyr)
library(janitor) #обработка загаловков таблицы в едином формате
library(openxlsx) #загрузка датасета с гита
library(lubridate) #работа с датами
library(ggplot2) #визуализация
library(zoo)
library(gsignal)
plot(spyro_p11_3$rn_r50_om)
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, lf_r50_om)) +
geom_line()
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
spyro_p11_3 <- spyro_p11_3 %>% mutate(vrema_obsled = as.numeric(hms(vrema_obsled) - hms(vrema_obsled[1])))
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, rn_r50_om)) +
geom_line()
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, rn_r50_om)) +
geom_line()
spyro_p11_3$rn_r50_om
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
#прочтение оригинальных данных
spiro_data <-  read.xlsx('https://raw.githubusercontent.com/hophee/kursach/main/kursovaya.xlsx', sheet=1) %>%
janitor::clean_names()
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
View(spyro_p11_3)
#прочтение оригинальных данных
spiro_data <-  read.xlsx('https://raw.githubusercontent.com/hophee/kursach/main/kursovaya.xlsx', sheet=1) %>%
janitor::clean_names()
View(spiro_data)
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
spyro_p11_3 <- spyro_p11_3 %>% mutate(vrema_obsled = as.numeric(hms(vrema_obsled) - hms(vrema_obsled[1])))
rm(spyro_p11_3)
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient == 'П11-3') %>%  select(c(1, 3:19))
summary(spiro_data)
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient=='П11-3') %>%  select(c(1, 3:19))
?filter
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient=='П11-3') %>% select(c(1, 3:19))
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(pacient=="П11-3") %>% select(c(1, 3:19))
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% filter(.,pacient=="П11-3") %>% select(c(1, 3:19))
filter()
filter
library(dplyr)
#для одного случая выделение нужной даты
spyro_p11_3 <- spiro_data %>% dplyr::filter(.,pacient=="П11-3") %>% select(c(1, 3:19))
View(spyro_p11_3)
spyro_p11_3 <- spyro_p11_3 %>% mutate(vrema_obsled = as.numeric(hms(vrema_obsled) - hms(vrema_obsled[1])))
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, rn_r50_om)) +
geom_line()
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, rn_r50_om)) +
geom_line()
?butter()
butter(spyro_p11_3$rn_r50_om, filter='low', Wc=10, n=2)
butter(spyro_p11_3$rn_r50_om, filter='low', Wc=10, n=2, w=c(10,25))
butter(spyro_p11_3$rn_r50_om, filter="low", Wc=10, n=2, w=c(10,25))
butter(spyro_p11_3$rn_r50_om, filter="low", Wc=10, w=c(10,25))
butter(spyro_p11_3$rn_r50_om, filter="low", Wc=10, w=c(10,25), n=2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Установка и загрузка пакета signal
butter = gsignal::butter
detach("package:gsignal", unload = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?butter()
# Применение фильтров Баттерворта разных порядков
filtered_data_order_1 <- butter(data, filter=c("low"), w=0.1, n=1)
install.packages("tseries")
library(tseries)
library(tseries)
install.packages("https://cran.r-project.org/src/contrib/tseries_0.10-58.tar.gz", repos = NULL)
library(tseries)
??tseries
library(gsignal)
filter <- dplyr::filter
bf <- butter(4, 0.4, type = "low")  # Фильтр Баттерворта 4-го порядка, низкочастотный
filtered_data <- filtfilt(bf, spyro_p11_3$rn_r50_om)
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df
names(df)
names(df)[1] = 'vrema_obsled4'
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
ggplot(data=df, aes(vrema_obsled4, filtered_data)) +
geom_line()
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, rn_r50_om)) +
geom_line()
ggplot(data=df, aes(vrema_obsled4, filtered_data)) +
geom_line()
df$filtered_data <- rollmean(df$filtered_data, k=3, fill=na.fill(., "extend"))
df$filtered_data <- rollmean(df$filtered_data, k=3, fill=na.fill(df$filtered_data, "extend"))
ggplot(data=df, aes(vrema_obsled4, filtered_data)) +
geom_line()
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
df$filtered_data <- rollmean(df$filtered_data, k=5, fill=na.fill(df$filtered_data, "extend"))
ggplot(data=df, aes(vrema_obsled4, filtered_data)) +
geom_line()
names(df)[1] =  'vrema_obsled'
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
df$filtered_data <- rollmean(df$filtered_data, k=5, fill=na.fill(df$filtered_data, "extend"))
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, rn_r50_om)) +
geom_line()
filtered_data <- filtfilt(bf, spyro_p11_3$rn_r50_om)
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
#отображение одного столбца
ggplot(data = spyro_p11_3, aes(vrema_obsled, rn_r50_om)) +
geom_line()
bf <- butter(4, 0.4, type = "low")  # Фильтр Баттерворта 4-го порядка, низкочастотный
filtered_data <- filtfilt(bf, spyro_p11_3$rn_r50_om)
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df$filtered_data <- rollmean(df$filtered_data, k=3, fill=na.fill(df$filtered_data, "extend"))
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
df$filtered_data <- rollmean(df$filtered_data, k=5, fill=na.fill(df$filtered_data, "extend"))
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df$filtered_data <- rollmean(df$filtered_data, k=5, fill=NA)
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
#делает все графики по отдельности
for (i in names(spyro_p11_3)[-(1:2)]){
p <- ggplot(data = spyro_p11_3, aes_string(x = "vrema_obsled", y = i)) +
geom_line()
print(p)
}
filtered_data <- filtfilt(bf, spyro_p11_3$rn_xc5_om)
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df$filtered_data <- rollmean(df$filtered_data, k=3, fill=NA)
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
df$filtered_data <- rollmean(df$filtered_data, k=5, fill=NA)
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
2.5^-1
filtered_data <- filtfilt(bf, spyro_p11_3$lf_xc5_om)
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df$filtered_data <- rollmean(df$filtered_data, k=5, fill=NA)
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
df$filtered_data <- rollmean(df$filtered_data, k=7, fill=NA)
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
?runmed
??runmed
filtered_data <- filtfilt(bf, spyro_p11_3$lf_xc5_om)
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
df$filtered_data <- stats::filter(df$filtered_data, 0.2, method = "recursive")
ggplot(data=df, aes(vrema_obsled, filtered_data)) +
geom_line()
stats::filter(df$filtered_data, 0.2, method = "recursive")
stats::filter(df$filtered_data, 0.1, method = "recursive")
bf <- butter(4, 0.4, type = "low")  # Фильтр Баттерворта 4-го порядка, низкочастотный
filtered_data <- filtfilt(bf, spyro_p11_3$lf_xc5_om)
df <- data.frame(spyro_p11_3$vrema_obsled, filtered_data)
names(df)[1] =  'vrema_obsled'
stats::filter(df$filtered_data, 0.2, method = "recursive")
?stats::filter
stats::filter(df$filtered_data, 0.01, method = "recursive")
stats::filter(df$filtered_data, 0.5, method = "recursive")
plot(stats::filter(df$filtered_data, 0.5, method = "recursive"))
sgolayfilt(df$filtered_data, p=5, n=5)
?sgolay
filtered_data <- filtfilt(gool, df$filtered_data)
gool <- sgolay(p=5, n=5)
filtered_data <- filtfilt(gool, df$filtered_data)
sgolayfilt(df$filtered_data, p=5, n=7)
sgolayfilt(df$filtered_data, p=5, n=11)
plot(sgolayfilt(df$filtered_data, p=5, n=11))
library(openxlsx) #загрузка датасета с гита
library(janitor) #обработка загаловков таблицы в едином формате
spiro_data <-  read.xlsx('https://raw.githubusercontent.com/hophee/kursach/main/kursovaya.xlsx', sheet=1)
#прочтение оригинальных данных
spiro_data <-  read.xlsx('https://raw.githubusercontent.com/hophee/kursach/main/kursovaya.xlsx', sheet=1) %>%
janitor::clean_names()
diff(spyro_p11_3$rn_r50_om)
length(diff(spyro_p11_3$rn_r50_om))
plot(spyro_p11_3$vrema_obsled, c(NA, diff(spyro_p11_3$rn_r50_om) / diff(spyro_p11_3$vrema_obsled)))
plot(c(NA, diff(spyro_p11_3$rn_r50_om) / diff(spyro_p11_3$vrema_obsled)))
#пневмотахограма
df <- spyro_p11_3 %>% select(c(2, 4))
library(tidyr)
library(dplyr)
library(janitor) #обработка загаловков таблицы в едином формате
library(openxlsx) #загрузка датасета с гита
library(lubridate) #работа с датами
library(ggplot2) #визуализация
library(zoo) #реализация фильтра скользящего окна
library(gsignal)#библиотека для обработки сигналов
#лучше использовать library(readxl), если загружается локально, тогда read.xlsx заменяется на read_xlsx
setwd(readLines("/home/iz-user/Documents/univer/additional_kursach/path_to_plots.txt"))
#пневмотахограма
df <- spyro_p11_3 %>% select(c(2, 4))
df
df$proizv <- c(NA, diff(df[1]) / diff(df[2]))
ggplot(data = df, aes(proizv)) +
geom_line()
names(df)
ggplot(data = df, aes(vrema_obsled, proizv)) +
geom_line()
df''
df
df$proizv <- c(NA, diff(df$rn_xc50_om) / diff(df$vrema_obsled))
ggplot(data = df, aes(vrema_obsled, proizv)) +
geom_line()
ggplot(data = df, aes(proizv)) +
geom_line()
ggplot(data = df, aes(proizv)) +
geom_point()
names(df)
ggplot(data = df, aes(rn_xc50_om, proizv)) +
geom_point()
ggplot(data = df, aes(rn_xc50_om, proizv)) +
geom_line()
